<?php

namespace Yeriomin\Getopt;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-08 at 04:55:25.
 */
class GetoptTest extends TestCase
{
    /**
     * @var Getopt
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        include_once dirname(__FILE__) . '/GetoptMock.php';
        $this->object = new GetoptMock;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Yeriomin\Getopt\Getopt::getOptionsLong
     */
    public function testGetOptionsLong()
    {
        $this->object->setRawArguments(array('--option1', 'value1'));
        $optionsLong = $this->object->getOptionsLong();
        $this->assertEquals('value1', $optionsLong['option1']);
        $this->object->setOptionsLong(array('option2' => 'value2'));
        $optionsLong = $this->object->getOptionsLong();
        $this->assertEquals('value2', $optionsLong['option2']);
        $this->object->setParsed(false);
        $this->object->setRawArguments(array('--option3', 'value3'));
        $optionsLong = $this->object->getOptionsLong();
        $this->assertEquals('value3', $optionsLong['option3']);
    }

    /**
     * @covers Yeriomin\Getopt\Getopt::getOptionsShort
     */
    public function testGetOptionsShort()
    {
        $this->object->setRawArguments(array('-a', 'value1'));
        $optionsShort = $this->object->getOptionsShort();
        $this->assertEquals('value1', $optionsShort['a']);
        $this->object->setOptionsShort(array('b' => 'value2'));
        $optionsShort = $this->object->getOptionsShort();
        $this->assertEquals('value2', $optionsShort['b']);
        $this->object->setParsed(false);
        $this->object->setRawArguments(array('-c', 'value3'));
        $optionsShort = $this->object->getOptionsShort();
        $this->assertEquals('value3', $optionsShort['c']);
    }

    /**
     * @covers Yeriomin\Getopt\Getopt::getArguments
     */
    public function testGetArguments()
    {
        $this->object->setRawArguments(array('value1'));
        $arguments = $this->object->getArguments();
        $this->assertContains('value1', $arguments);
        $this->object->setArguments(array('value2'));
        $arguments = $this->object->getArguments();
        $this->assertContains('value2', $arguments);
        $this->object->setParsed(false);
        $this->object->setRawArguments(array('value3'));
        $arguments = $this->object->getArguments();
        $this->assertContains('value3', $arguments);
    }

    /**
     * @covers Yeriomin\Getopt\Getopt::setUsageProvider
     */
    public function testSetUsageProvider()
    {
        $this->assertInstanceOf(
            'Yeriomin\Getopt\UsageProvider',
            $this->object->getUsageProvider()
        );
        $up = new UsageProviderMock();
        $this->object->setUsageProvider($up);
        $this->assertInstanceOf(
            'Yeriomin\Getopt\UsageProviderMock',
            $this->object->getUsageProvider()
        );
    }

    /**
     * @covers Yeriomin\Getopt\Getopt::setParser
     */
    public function testSetParser()
    {
        include_once dirname(__FILE__) . '/ParserMock.php';
        $this->assertInstanceOf(
            'Yeriomin\Getopt\Parser',
            $this->object->getParser()
        );
        $p = new ParserMock();
        $this->object->setParser($p);
        $this->assertInstanceOf(
            'Yeriomin\Getopt\ParserMock',
            $this->object->getParser()
        );
    }

    /**
     * @covers Yeriomin\Getopt\Getopt::addOptionDefinition
     */
    public function testAddOptionDefinition()
    {
        $this->assertEmpty($this->object->getOptionDefinitions());
        $optionDefinition = new OptionDefinition('a');
        $this->object->addOptionDefinition($optionDefinition);
        $optionDefinitions = $this->object->getOptionDefinitions();
        $this->assertEquals('a', $optionDefinitions[0]->getShort());
    }

    /**
     * @covers Yeriomin\Getopt\Getopt::getUsageMessage
     */
    public function testGetUsageMessage()
    {
        $optionDefinition = new OptionDefinition('a', 'abc', 'description');
        $this->object->setOptionDefinitions(array($optionDefinition));
        $this->object->setScriptName('name');
        $expected = 'Usage: name [OPTIONS] [ARGUMENTS]

Options:
 -a, --abc description
';
        $actual = $this->object->getUsageMessage();
        $this->assertEquals($expected, $actual);
    }

    /**
     * @covers Yeriomin\Getopt\Getopt::parse
     */
    public function testParse()
    {
        $optionDefinition = new OptionDefinition('s', 'opt1');
        $this->object->addOptionDefinition($optionDefinition);
        $optionDefinition = new OptionDefinition('t', 'opt2');
        $this->object->addOptionDefinition($optionDefinition);
        $args = array('-s', '--opt2', 'val2', 'arg1');
        $this->object->setRawArguments($args);
        $this->object->parse();
        $optionsShort = $this->object->getOptionsShort();
        $optionsLong = $this->object->getOptionsLong();
        $this->assertEquals(true, $optionsShort['s']);
        $this->assertEquals(true, $optionsLong['opt1']);
        $this->assertEquals('val2', $optionsShort['t']);
        $this->assertEquals('val2', $optionsLong['opt2']);
        $this->assertContains('arg1', $this->object->getArguments());
    }

    /**
     * @covers Yeriomin\Getopt\Getopt::parse
     * @expectedException Yeriomin\Getopt\GetoptException
     * @expectedExceptionMessage Both -s and --opt1 given, with non-matching values. Make up your mind.
     */
    public function testParseOverlappingOption()
    {
        $args = array('-s', '--opt1', 'val1', 'arg1');
        $this->object->setRawArguments($args);
        $optionDefinition = new OptionDefinition('s', 'opt1');
        $this->object->addOptionDefinition($optionDefinition);
        $this->object->parse();
    }

    /**
     * @covers Yeriomin\Getopt\Getopt::parse
     * @expectedException Yeriomin\Getopt\GetoptException
     * @expectedExceptionMessage Missing required options: -s|--opt1
     */
    public function testParseMissingRequired()
    {
        $args = array();
        $this->object->setRawArguments($args);
        $optionDefinition = new OptionDefinition('s', 'opt1', 'descr', true);
        $this->object->addOptionDefinition($optionDefinition);
        $this->object->parse();
    }

    /**
     * @covers Yeriomin\Getopt\Getopt::parse
     * @expectedException Yeriomin\Getopt\GetoptException
     * @expectedExceptionMessage Missing required options: -s
     */
    public function testParseMissingRequiredShort()
    {
        $args = array();
        $this->object->setRawArguments($args);
        $optionDefinition = new OptionDefinition('s', null, 'descr', true);
        $this->object->addOptionDefinition($optionDefinition);
        $this->object->parse();
    }

    /**
     * @covers Yeriomin\Getopt\Getopt::__get
     */
    public function test__get()
    {
        $args = array('-s', '--opt1', 'val1', 'arg1');
        $this->object->setRawArguments($args);
        $this->object->parse();
        $this->assertEquals(null, $this->object->t);
        $this->assertEquals(true, $this->object->s);
        $this->assertEquals('val1', $this->object->opt1);
    }
}
