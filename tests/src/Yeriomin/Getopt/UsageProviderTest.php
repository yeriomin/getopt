<?php

namespace Yeriomin\Getopt;

use PHPUnit\Framework\TestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-04 at 04:22:08.
 */
class UsageProviderTest extends TestCase
{
    /**
     * @var UsageProviderMock
     */
    protected $object;

    /**
     * Expected usage message
     *
     * @var string
     */
    private $expectedMessage = <<<EOT
Usage: name [OPTIONS] ARG1 ARG2

Options:
 -a, --long1 description1
 -b, --long2 description2

EOT;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        include_once dirname(__FILE__) . '/UsageProviderMock.php';
        $this->object = new UsageProviderMock();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Yeriomin\Getopt\UsageProvider::setScriptName
     */
    public function testSetScriptName()
    {
        $this->assertEmpty($this->object->getScriptName());
        $this->object->setScriptName('name');
        $this->assertEquals('name', $this->object->getScriptName());
    }

    /**
     * @covers Yeriomin\Getopt\UsageProvider::addOptionDefinition
     */
    public function testAddOptionDefinition()
    {
        $this->assertEmpty($this->object->getOptionDefinitions());
        $option1 = new OptionDefinition('a', 'long1');
        $this->object->addOptionDefinition($option1);
        $options = $this->object->getOptionDefinitions();
        $this->assertNotEmpty($options);
        $this->assertInternalType('array', $options);
        $this->assertCount(1, $options);
        $this->assertInstanceOf('Yeriomin\Getopt\OptionDefinition', $options[0]);
        $this->assertEquals('a', $options[0]->getShort());
        $this->assertEquals('long1', $options[0]->getLong());
        $option2 = new OptionDefinition('b', 'long2');
        $this->object->addOptionDefinition($option2);
        $options = $this->object->getOptionDefinitions();
        $this->assertNotEmpty($options);
        $this->assertInternalType('array', $options);
        $this->assertCount(2, $options);
        $this->assertInstanceOf('Yeriomin\Getopt\OptionDefinition', $options[0]);
        $this->assertEquals('a', $options[0]->getShort());
        $this->assertEquals('long1', $options[0]->getLong());
        $this->assertInstanceOf('Yeriomin\Getopt\OptionDefinition', $options[1]);
        $this->assertEquals('b', $options[1]->getShort());
        $this->assertEquals('long2', $options[1]->getLong());
    }

    /**
     * @covers Yeriomin\Getopt\UsageProvider::getUsageMessage
     * @covers Yeriomin\Getopt\UsageProvider::getOptionString
     * @expectedException Yeriomin\Getopt\GetoptException
     * @expectedExceptionMessage Script name can not be empty
     */
    public function testGetUsageMessage()
    {
        $this->object->setScriptName('name');
        $this->object->setArgumentsDescription('[OPTIONS] ARG1 ARG2');
        $option1 = new OptionDefinition('a', 'long1', 'description1');
        $this->object->addOptionDefinition($option1);
        $option2 = new OptionDefinition('b', 'long2', 'description2', true);
        $this->object->addOptionDefinition($option2);
        $message = $this->object->getUsageMessage();
        $this->assertNotEmpty($message);
        $this->assertInternalType('string', $message);
        $this->assertEquals($this->expectedMessage, $message);
        $this->setUp();
        $this->object->getUsageMessage();
    }
}
